package main

import (
	"github.com/vrishikesh/go-leetcode/leetcode/leetcode"
)

func main() {
	// leetcode.PrintAllSubsequences()
	// leetcode.PrintAllSSThatSumToK()
	// leetcode.PrintTheFirstSSThatSumToK()
	// leetcode.PrintTheCountOfSsThatSumToK()
	// leetcode.PrintAllCombSubsequencesThatSumToK()
	// leetcode.NumSquaresDFS()
	// leetcode.NumSquaresDP()
	// leetcode.CombinationSum2()
	// leetcode.PrintAllPermutationsMap()
	// leetcode.PrintAllPermutationsSwap()
	// leetcode.NQueens()
	// leetcode.SolveSudoku()
	// leetcode.MColoring()
	// leetcode.PalindromePartitioning()
	// leetcode.RatInAMaze()
	// leetcode.PermutationSequence()
	// leetcode.NumberOfInversions()
	// leetcode.IsSubsequence()
	// graph.DfsOfGraph()
	// leetcode.RottenOranges()
	// graph.DetectCycleBFS()
	// leetcode.TaxiCost()
	// leetcode.MinRemoveToMakeValid()
	// leetcode.ImplementQueueUsingStacks()
	// leetcode.FindKthLargest()
	// leetcode.SearchRange()
	// leetcode.MaxDepth()
	// leetcode.LevelOrder()
	// leetcode.RightSideView()
	// leetcode.CountNodes()
	// leetcode.AddStrings()
	// leetcode.CreateSet()
	// leetcode.IsValidBST()
	// leetcode.ImplementPriorityQueue()
	// leetcode.ImplementFirstNonRepeatedNumber()
	// leetcode.TwoDimensionalArrayDFSTraversal()
	// leetcode.TwoDimensionalArrayBFSTraversal()
	// leetcode.NumberOfIslands()
	// leetcode.OrangesRotting()
	// leetcode.WallsAndGates()
	// leetcode.GraphTraversalBFS()
	// leetcode.GraphTraversalDFS()
	// leetcode.NumOfMinutes()
	// leetcode.CanFinish()
	// leetcode.NetworkDelayTime()
	leetcode.LetterCombinations()
}
